// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PulseUI -package-name PulsePackageIdentifier
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Charts
import Combine
import CommonCrypto
import CoreData
import Foundation
import Network
import PDFKit
import Pulse
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import WatchConnectivity
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
package enum ConsoleSearchScope : Swift.Equatable, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
  case message
  case metadata
  case url
  case originalRequestHeaders
  case currentRequestHeaders
  case requestBody
  case responseHeaders
  case responseBody
  package var isDisplayedInResults: Swift.Bool {
    get
  }
  package static let messageScopes: [PulseUI.ConsoleSearchScope]
  package static let networkScopes: [PulseUI.ConsoleSearchScope]
  package var title: Swift.String {
    get
  }
  package static func == (a: PulseUI.ConsoleSearchScope, b: PulseUI.ConsoleSearchScope) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package typealias AllCases = [PulseUI.ConsoleSearchScope]
  nonisolated package static var allCases: [PulseUI.ConsoleSearchScope] {
    get
  }
  package func encode(to encoder: any Swift.Encoder) throws
  package var hashValue: Swift.Int {
    get
  }
  package init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency package struct ConsoleMessageCell : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let message: Pulse.LoggerMessageEntity
  @_Concurrency.MainActor @preconcurrency package var isDisclosureNeeded: Swift.Bool
  @_Concurrency.MainActor @preconcurrency package init(message: Pulse.LoggerMessageEntity, isDisclosureNeeded: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI18ConsoleMessageCellV4bodyQrvp", 0) __
}
extension UIKit.UIColor {
  package static func textColor(for level: Pulse.LoggerStore.Level) -> PulseUI.UXColor
}
extension SwiftUICore.Color {
  package static func textColor(for level: Pulse.LoggerStore.Level) -> SwiftUICore.Color
}
@available(iOS 16, visionOS 1, macOS 13, *)
@_Concurrency.MainActor @preconcurrency package struct NetworkInspectorView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(task: Pulse.NetworkTaskEntity)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 13, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI20NetworkInspectorViewV4bodyQrvp", 0) __
}
@available(iOS 16, macOS 13, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct ConsoleSessionsPickerView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package static var makeSessionPicker: (SwiftUICore.Binding<Swift.Set<Foundation.UUID>>) -> SwiftUICore.AnyView
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 13, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI25ConsoleSessionsPickerViewV4bodyQrvp", 0) __
}
package enum ContextMenu {
  @available(iOS 16, visionOS 1, *)
  @_Concurrency.MainActor @preconcurrency package struct MessageContextMenu : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency package let message: Pulse.LoggerMessageEntity
    @SwiftUICore.Binding @_projectedValueProperty($shareItems) @_Concurrency.MainActor @preconcurrency package var shareItems: PulseUI.ShareItems? {
      get
    }
    @_Concurrency.MainActor @preconcurrency package var $shareItems: SwiftUICore.Binding<PulseUI.ShareItems?> {
      get
    }
    @_Concurrency.MainActor @preconcurrency package init(message: Pulse.LoggerMessageEntity, shareItems: SwiftUICore.Binding<PulseUI.ShareItems?>)
    @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
      get
    }
    @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
    package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI11ContextMenuO07MessagecD0V4bodyQrvp", 0) __
  }
  @_Concurrency.MainActor @preconcurrency package struct NetworkTaskContextMenuItems : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency package init(task: Pulse.NetworkTaskEntity, sharedItems: SwiftUICore.Binding<PulseUI.ShareItems?>, isDetailsView: Swift.Bool = false)
    @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
      get
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI11ContextMenuO011NetworkTaskcD5ItemsV4bodyQrvp", 0) __
  }
  @_Concurrency.MainActor @preconcurrency package struct NetworkTaskCopyMenu : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency package init(task: Pulse.NetworkTaskEntity)
    @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
      get
    }
    @_Concurrency.MainActor @preconcurrency package func content() -> some SwiftUICore.View
    
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI11ContextMenuO015NetworkTaskCopyD0V4bodyQrvp", 0) __
  }
}
@_Concurrency.MainActor @preconcurrency package struct StringSearchOptionsMenu : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(options: SwiftUICore.Binding<PulseUI.StringSearchOptions>, isKindNeeded: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI23StringSearchOptionsMenuV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency package struct AttributedStringShareMenu : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(shareItems: SwiftUICore.Binding<PulseUI.ShareItems?>, string: @escaping () -> Foundation.NSAttributedString)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI25AttributedStringShareMenuV4bodyQrvp", 0) __
}
@objc final package class ManagedObjectsCountObserver : ObjectiveC.NSObject, Foundation.ObservableObject, CoreData.NSFetchedResultsControllerDelegate {
  final package let controller: CoreData.NSFetchedResultsController<CoreData.NSManagedObject>
  @Combine.Published @_projectedValueProperty($count) final package var count: Swift.Int {
    get
  }
  final package var $count: Combine.Published<Swift.Int>.Publisher {
    get
  }
  package init<T>(entity: T.Type, context: CoreData.NSManagedObjectContext, sortDescriptior: Foundation.NSSortDescriptor) where T : CoreData.NSManagedObject
  final package func setPredicate(_ predicate: Foundation.NSPredicate?)
  final package func refresh()
  @objc final package func controllerDidChangeContent(_ controller: CoreData.NSFetchedResultsController<any CoreData.NSFetchRequestResult>)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency package struct ConsoleSearchToggleCell : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let title: Swift.String
  @SwiftUICore.Binding @_projectedValueProperty($isOn) @_Concurrency.MainActor @preconcurrency package var isOn: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency package var $isOn: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor @preconcurrency package init(title: Swift.String, isOn: SwiftUICore.Binding<Swift.Bool>)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI23ConsoleSearchToggleCellV4bodyQrvp", 0) __
}
package struct ConsoleSearchTerm : Swift.Identifiable, Swift.Hashable, Swift.Codable {
  package var id: PulseUI.ConsoleSearchTerm {
    get
  }
  package var text: Swift.String
  package var options: PulseUI.StringSearchOptions
  package init(text: Swift.String, options: PulseUI.StringSearchOptions)
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: PulseUI.ConsoleSearchTerm, b: PulseUI.ConsoleSearchTerm) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ID = PulseUI.ConsoleSearchTerm
  package func encode(to encoder: any Swift.Encoder) throws
  package var hashValue: Swift.Int {
    get
  }
  package init(from decoder: any Swift.Decoder) throws
}
@available(iOS 16, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct PlainListGroupSeparator : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init()
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI23PlainListGroupSeparatorV4bodyQrvp", 0) __
}
@available(iOS 16, macOS 13, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct PlainListSectionHeader<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package var title: Swift.String?
  @_Concurrency.MainActor @preconcurrency package let content: () -> Content
  @_Concurrency.MainActor @preconcurrency package init(title: Swift.String? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 13, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI22PlainListSectionHeaderV4bodyQrvp", 0) __<Content>
}
@available(iOS 16, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct PlainListSeeAllView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(count: Swift.Int)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI19PlainListSeeAllViewV4bodyQrvp", 0) __
}
@available(iOS 16, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct PlainListSectionHeaderSeparator : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(title: Swift.String)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI31PlainListSectionHeaderSeparatorV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency package struct WebView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency package let data: Foundation.Data
  @_Concurrency.MainActor @preconcurrency package let contentType: Swift.String
  @_Concurrency.MainActor @preconcurrency package init(data: Foundation.Data, contentType: Swift.String)
  @_Concurrency.MainActor @preconcurrency package func makeUIView(context: PulseUI.WebView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor @preconcurrency package func updateUIView(_ webView: WebKit.WKWebView, context: PulseUI.WebView.Context)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  package typealias Coordinator = Swift.Void
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  package typealias UIViewType = WebKit.WKWebView
}
@_Concurrency.MainActor @preconcurrency package struct ImageViewer : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let viewModel: PulseUI.ImagePreviewViewModel
  @_Concurrency.MainActor @preconcurrency package init(viewModel: PulseUI.ImagePreviewViewModel)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI11ImageViewerV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency package struct ImageThumbnailView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(viewModel: PulseUI.ImagePreviewViewModel)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI18ImageThumbnailViewV4bodyQrvp", 0) __
}
package struct ImagePreviewViewModel {
  package let image: PulseUI.UXImage
  package let info: PulseUI.KeyValueSectionViewModel
  package let context: PulseUI.FileViewerViewModelContext
  package init(image: PulseUI.UXImage, data: Foundation.Data, context: PulseUI.FileViewerViewModelContext)
}
@_Concurrency.MainActor @preconcurrency package struct ConsoleModeButton : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let title: Swift.String
  @_Concurrency.MainActor @preconcurrency package var details: Swift.String?
  @_Concurrency.MainActor @preconcurrency package let isSelected: Swift.Bool
  @_Concurrency.MainActor @preconcurrency package let action: () -> Swift.Void
  @_Concurrency.MainActor @preconcurrency package init(title: Swift.String, details: Swift.String? = nil, isSelected: Swift.Bool, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI17ConsoleModeButtonV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency package struct InfoRow : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let title: Swift.String
  @_Concurrency.MainActor @preconcurrency package let details: Swift.String?
  @_Concurrency.MainActor @preconcurrency package init(title: Swift.String, details: Swift.String?)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI7InfoRowV4bodyQrvp", 0) __
}
package struct KeyValueRow : Swift.Identifiable {
  package let id: Swift.Int
  package let item: (Swift.String, Swift.String?)
  package var title: Swift.String {
    get
  }
  package var details: Swift.String? {
    get
  }
  package init(id: Swift.Int, item: (Swift.String, Swift.String?))
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ID = Swift.Int
}
@available(iOS 16, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency public struct SettingsView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(store: Pulse.LoggerStore = .shared)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7PulseUI12SettingsViewV4bodyQrvp", 0) __
}
@available(iOS 16, tvOS 16, macOS 13, watchOS 9, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct LoggerStoreSizeChart : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let info: Pulse.LoggerStore.Info
  @_Concurrency.MainActor @preconcurrency package let sizeLimit: Swift.Int64?
  @_Concurrency.MainActor @preconcurrency package init(info: Pulse.LoggerStore.Info, sizeLimit: Swift.Int64?)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 16, watchOS 9, visionOS 1, macOS 13, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI20LoggerStoreSizeChartV4bodyQrvp", 0) __
}
final package class LoggerStoreIndex : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($labels) final package var labels: Swift.Set<Swift.String> {
    get
  }
  final package var $labels: Combine.Published<Swift.Set<Swift.String>>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($files) final package var files: Swift.Set<Swift.String> {
    get
  }
  final package var $files: Combine.Published<Swift.Set<Swift.String>>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($hosts) final package var hosts: Swift.Set<Swift.String> {
    get
  }
  final package var $hosts: Combine.Published<Swift.Set<Swift.String>>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($paths) final package var paths: Swift.Set<Swift.String> {
    get
  }
  final package var $paths: Combine.Published<Swift.Set<Swift.String>>.Publisher {
    get
  }
  convenience package init(store: Pulse.LoggerStore)
  package init(context: CoreData.NSManagedObjectContext)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 16, visionOS 1, *)
final package class ConsoleSearchOccurrence : Swift.Identifiable, Swift.Equatable, Swift.Hashable {
  final package let id: PulseUI.ConsoleSearchOccurrenceId
  final package let scope: PulseUI.ConsoleSearchScope
  final package let match: PulseUI.ConsoleSearchMatch
  final package var line: Swift.Int {
    get
  }
  final package var range: Foundation.NSRange {
    get
  }
  final package var preview: Foundation.AttributedString {
    get
    set
  }
  final package let searchContext: PulseUI.TextViewSearchContext
  package init(scope: PulseUI.ConsoleSearchScope, match: PulseUI.ConsoleSearchMatch, searchContext: PulseUI.TextViewSearchContext)
  package static func == (lhs: PulseUI.ConsoleSearchOccurrence, rhs: PulseUI.ConsoleSearchOccurrence) -> Swift.Bool
  final package func hash(into hasher: inout Swift.Hasher)
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
  package typealias ID = PulseUI.ConsoleSearchOccurrenceId
  @objc deinit
  final package var hashValue: Swift.Int {
    get
  }
}
package struct ConsoleSearchOccurrenceId : Swift.Hashable {
  package let id: Foundation.UUID
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: PulseUI.ConsoleSearchOccurrenceId, b: PulseUI.ConsoleSearchOccurrenceId) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
package struct ConsoleSearchMatch {
  package let line: Swift.String
  package let lineNumber: Swift.Int
  package let range: Swift.Range<Swift.String.Index>
  package let term: PulseUI.ConsoleSearchTerm
  package static let limit: Swift.Int
  package init(line: Swift.String, lineNumber: Swift.Int, range: Swift.Range<Swift.String.Index>, term: PulseUI.ConsoleSearchTerm)
}
@available(iOS 16, visionOS 1, *)
final package class ConsoleSearchService {
  package init()
  final package func clearCache()
  final package func getBodyString(for blob: Pulse.LoggerBlobHandleEntity) -> Swift.String?
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency package struct PinView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(message: Pulse.LoggerMessageEntity?)
  @_Concurrency.MainActor @preconcurrency package init(task: Pulse.NetworkTaskEntity)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI7PinViewV4bodyQrvp", 0) __
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class MainViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public static var isAutomaticAppearanceOverrideRemovalEnabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public init(store: Pulse.LoggerStore = .shared)
  @objc deinit
}
extension PulseUI.ConsoleView {
  @_Concurrency.MainActor @preconcurrency public init(store: Pulse.LoggerStore = .shared, mode: PulseUI.ConsoleMode = .all)
}
package struct StatusLabelViewModel {
  package let systemImage: Swift.String
  package let tint: SwiftUICore.Color
  package let title: Swift.String
  package init(task: Pulse.NetworkTaskEntity, store: Pulse.LoggerStore?)
  package init(transaction: Pulse.NetworkTransactionMetricsEntity)
  package var text: SwiftUICore.Text {
    get
  }
}
@_Concurrency.MainActor @preconcurrency package struct SectionHeaderView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package var systemImage: Swift.String?
  @_Concurrency.MainActor @preconcurrency package let title: Swift.String
  @_Concurrency.MainActor @preconcurrency package init(systemImage: Swift.String? = nil, title: Swift.String)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI17SectionHeaderViewV4bodyQrvp", 0) __
}
final package class TextRendererJSON {
  package init(json: Any, error: Pulse.NetworkLogger.DecodingError? = nil, options: PulseUI.TextRenderer.Options = .init())
  final package func render() -> Foundation.NSAttributedString
  package static var makeErrorAttributes: ((any Swift.Error) -> [Foundation.NSAttributedString.Key : Any])?
  @objc deinit
}
package struct JSONColors {
  package static let punctuation: UIKit.UIColor
  package static let key: UIKit.UIColor
  package static let valueString: PulseUI.UXColor
  package static let valueOther: UIKit.UIColor
  package static let null: PulseUI.UXColor
}
extension Foundation.NSAttributedString.Key {
  package static let decodingError: Foundation.NSAttributedString.Key
  package static let node: Foundation.NSAttributedString.Key
}
package enum JSONElement {
  case punctuation
  case key
  case valueString
  case valueOther
  case null
  package static func == (a: PulseUI.JSONElement, b: PulseUI.JSONElement) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
final package class JSONContainerNode {
  package enum Kind {
    case object
    case array
    package static func == (a: PulseUI.JSONContainerNode.Kind, b: PulseUI.JSONContainerNode.Kind) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  final package let kind: PulseUI.JSONContainerNode.Kind
  final package let json: Any
  final package var isExpanded: Swift.Bool
  final package var expanded: Foundation.NSAttributedString?
  package init(kind: PulseUI.JSONContainerNode.Kind, json: Any)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency package struct NetworkInspectorTransferInfoView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let viewModel: PulseUI.NetworkInspectorTransferInfoViewModel
  @_Concurrency.MainActor @preconcurrency package var isSentHidden: Swift.Bool
  @_Concurrency.MainActor @preconcurrency package var isReceivedHidden: Swift.Bool
  @_Concurrency.MainActor @preconcurrency package init(viewModel: PulseUI.NetworkInspectorTransferInfoViewModel, isSentHidden: Swift.Bool = false, isReceivedHidden: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI32NetworkInspectorTransferInfoViewV4bodyQrvp", 0) __
}
package struct NetworkInspectorTransferInfoViewModel {
  package let totalBytesSent: Swift.String
  package let bodyBytesSent: Swift.String
  package let headersBytesSent: Swift.String
  package let totalBytesReceived: Swift.String
  package let bodyBytesReceived: Swift.String
  package let headersBytesReceived: Swift.String
  package init(empty: Swift.Bool)
  package init(task: Pulse.NetworkTaskEntity)
  package init(transferSize: Pulse.NetworkLogger.TransferSizeInfo)
}
@_Concurrency.MainActor @preconcurrency package struct PDFKitRepresentedView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency package let document: PDFKit.PDFDocument
  @_Concurrency.MainActor @preconcurrency package init(document: PDFKit.PDFDocument)
  @_Concurrency.MainActor @preconcurrency package func makeUIView(context: PulseUI.PDFKitRepresentedView.Context) -> PDFKit.PDFView
  @_Concurrency.MainActor @preconcurrency package func updateUIView(_ view: PDFKit.PDFView, context: PulseUI.PDFKitRepresentedView.Context)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  package typealias Coordinator = Swift.Void
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  package typealias UIViewType = PDFKit.PDFView
}
extension Foundation.URLSessionTaskMetrics.ResourceFetchType {
  package var title: Swift.String {
    get
  }
}
@_Concurrency.MainActor @preconcurrency package struct ConsoleSection<Header, Content> : SwiftUICore.View where Header : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package var isDividerHidden: Swift.Bool
  @_Concurrency.MainActor @preconcurrency package var header: () -> Header
  @_Concurrency.MainActor @preconcurrency package var content: () -> Content
  @_Concurrency.MainActor @preconcurrency package init(isDividerHidden: Swift.Bool = false, @SwiftUICore.ViewBuilder header: @escaping () -> Header, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI14ConsoleSectionV4bodyQrvp", 0) __<Header, Content>
}
public enum ConsoleMode : Swift.String {
  case all
  case logs
  case network
  package var hasLogs: Swift.Bool {
    get
  }
  package var hasNetwork: Swift.Bool {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SwiftUICore.EnvironmentValues {
  package var store: Pulse.LoggerStore {
    get
    set
  }
  package var router: PulseUI.ConsoleRouter {
    get
    set
  }
}
@_Concurrency.MainActor @preconcurrency package struct NetworkDetailsView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(title: Swift.String, viewModel: @escaping () -> PulseUI.KeyValueSectionViewModel?)
  @_Concurrency.MainActor @preconcurrency package init(title: Swift.String, text: @escaping () -> Foundation.NSAttributedString?)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI18NetworkDetailsViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency package struct Checkbox<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(isOn: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder label: @escaping () -> Label)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI8CheckboxV4bodyQrvp", 0) __<Label>
}
@available(iOS 16, macOS 13, watchOS 9, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct ShareStoreView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(sessions: Swift.Set<Foundation.UUID> = [], onDismiss: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 9, visionOS 1, macOS 13, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI14ShareStoreViewV4bodyQrvp", 0) __
}
package enum DurationFormatter {
  package static func string(from timeInterval: Foundation.TimeInterval) -> Swift.String
  package static func string(from timeInterval: Foundation.TimeInterval, isPrecise: Swift.Bool) -> Swift.String
}
extension Foundation.DateFormatter {
  package static let fullDateFormatter: Foundation.DateFormatter
  convenience package init(dateStyle: Foundation.DateFormatter.Style, timeStyle: Foundation.DateFormatter.Style, isRelative: Swift.Bool = false)
}
package enum StatusCodeFormatter {
  package static func string(for statusCode: Swift.Int32) -> Swift.String
  package static func string(for statusCode: Swift.Int) -> Swift.String
}
package enum ErrorFormatter {
  package static func shortErrorDescription(for task: Pulse.NetworkTaskEntity) -> Swift.String
}
extension Foundation.ByteCountFormatter {
  package static func string(fromBodySize count: Swift.Int64) -> Swift.String?
  package static func string(fromByteCount count: Swift.Int64) -> Swift.String
}
package enum CountFormatter {
  package static func string(from count: Swift.Int) -> Swift.String
}
final package class NetworkInspectorTransactionViewModel : Foundation.ObservableObject, Swift.Identifiable {
  final package let id: CoreData.NSManagedObjectID
  final package let title: Swift.String
  final package let transaction: Pulse.NetworkTransactionMetricsEntity
  final package let statusViewModel: PulseUI.NetworkRequestStatusCellModel
  final package let timingViewModel: PulseUI.TimingViewModel?
  final package let requestViewModel: PulseUI.NetworkRequestInfoCellViewModel
  final package let transferSizeViewModel: PulseUI.NetworkInspectorTransferInfoViewModel?
  final package let details: () -> Foundation.NSAttributedString
  package init(transaction: Pulse.NetworkTransactionMetricsEntity, task: Pulse.NetworkTaskEntity)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ID = CoreData.NSManagedObjectID
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
package protocol ConsoleEntitiesSource {
  var events: Combine.PassthroughSubject<PulseUI.ConsoleUpdateEvent, Swift.Never> { get }
  var entities: [CoreData.NSManagedObject] { get }
}
@available(iOS 16, macOS 13, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct ConsoleMessageDetailsView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let message: Pulse.LoggerMessageEntity
  @_Concurrency.MainActor @preconcurrency package init(message: Pulse.LoggerMessageEntity)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 13, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI25ConsoleMessageDetailsViewV4bodyQrvp", 0) __
}
package struct FileViewerViewModelContext {
  package var contentType: Pulse.NetworkLogger.ContentType?
  package var originalSize: Swift.Int64
  package var metadata: [Swift.String : Swift.String]?
  package var isResponse: Swift.Bool
  package var error: Pulse.NetworkLogger.DecodingError?
  package var sourceURL: Foundation.URL?
  package init(contentType: Pulse.NetworkLogger.ContentType? = nil, originalSize: Swift.Int64, metadata: [Swift.String : Swift.String]? = nil, isResponse: Swift.Bool = true, error: Pulse.NetworkLogger.DecodingError? = nil, sourceURL: Foundation.URL? = nil)
}
extension Pulse.NetworkTaskEntity {
  final package var requestFileViewerContext: PulseUI.FileViewerViewModelContext {
    get
  }
  final package var responseFileViewerContext: PulseUI.FileViewerViewModelContext {
    get
  }
  final package func state(in store: Pulse.LoggerStore?) -> Pulse.NetworkTaskEntity.State?
}
package struct KeyValueSectionViewModel {
  package var title: Swift.String
  package var color: SwiftUICore.Color
  package var items: [(Swift.String, Swift.String?)]
  package init(title: Swift.String, color: SwiftUICore.Color, items: [(Swift.String, Swift.String?)])
}
extension PulseUI.KeyValueSectionViewModel {
  package static func makeParameters(for request: Pulse.NetworkRequestEntity) -> PulseUI.KeyValueSectionViewModel
  package static func makeTaskDetails(for task: Pulse.NetworkTaskEntity) -> PulseUI.KeyValueSectionViewModel
  package static func makeComponents(for url: Foundation.URL) -> PulseUI.KeyValueSectionViewModel?
  package static func makeHeaders(title: Swift.String, headers: [Swift.String : Swift.String]?) -> PulseUI.KeyValueSectionViewModel
  package static func makeErrorDetails(for task: Pulse.NetworkTaskEntity) -> PulseUI.KeyValueSectionViewModel?
  package static func makeQueryItems(for url: Foundation.URL) -> PulseUI.KeyValueSectionViewModel?
  package static func makeQueryItems(for queryItems: [Foundation.URLQueryItem]) -> PulseUI.KeyValueSectionViewModel?
  package static func makeDetails(for transaction: Pulse.NetworkTransactionMetricsEntity) -> [PulseUI.KeyValueSectionViewModel]
  package static func makeDetails(for cookie: Foundation.HTTPCookie, color: SwiftUICore.Color) -> PulseUI.KeyValueSectionViewModel
}
final package class TextRenderer {
  package struct Options {
    package var color: PulseUI.TextRenderer.ColorMode
    package init(color: PulseUI.TextRenderer.ColorMode = .full)
    package static let sharing: PulseUI.TextRenderer.Options
  }
  package enum ColorMode : Swift.String, Swift.RawRepresentable {
    case monochrome
    case automatic
    case full
    package init?(rawValue: Swift.String)
    package typealias RawValue = Swift.String
    package var rawValue: Swift.String {
      get
    }
  }
  package init(options: PulseUI.TextRenderer.Options = .init())
  final package func make(_ render: (PulseUI.TextRenderer) -> Swift.Void) -> Foundation.NSAttributedString
  final package func make() -> Foundation.NSMutableAttributedString
  final package func addSpacer()
  final package func spacer() -> Foundation.NSAttributedString
  final package func render(_ message: Pulse.LoggerMessageEntity)
  final package func renderCompact(_ message: Pulse.LoggerMessageEntity)
  final package func render(_ task: Pulse.NetworkTaskEntity, content: PulseUI.NetworkContent, store: Pulse.LoggerStore)
  final package func renderCompact(_ task: Pulse.NetworkTaskEntity, store: Pulse.LoggerStore)
  final package func render(_ transaction: Pulse.NetworkTransactionMetricsEntity)
  final package func render(subheadline: Swift.String) -> Foundation.NSAttributedString
  final package func render(json: Any, error: Pulse.NetworkLogger.DecodingError? = nil) -> Foundation.NSAttributedString
  final package func render(_ blob: Pulse.LoggerBlobHandleEntity, _ data: Foundation.Data, contentType: Pulse.NetworkLogger.ContentType?, error: Pulse.NetworkLogger.DecodingError?) -> Foundation.NSAttributedString
  final package func render(_ data: Foundation.Data, contentType: Pulse.NetworkLogger.ContentType?, error: Pulse.NetworkLogger.DecodingError?) -> Foundation.NSAttributedString
  final package func render(_ sections: [PulseUI.KeyValueSectionViewModel])
  final package func render(_ section: PulseUI.KeyValueSectionViewModel, details: Swift.String? = nil, style: PulseUI.TextFontStyle = .monospaced) -> Foundation.NSAttributedString
  final package func render(_ values: [(Swift.String, Swift.String?)]?, color: SwiftUICore.Color, style: PulseUI.TextFontStyle = .monospaced) -> Foundation.NSAttributedString
  final package func preformatted(_ string: Swift.String, color: PulseUI.UXColor? = nil) -> Foundation.NSAttributedString
  final package func append(_ string: Foundation.NSAttributedString)
  final package func render(_ string: Swift.String, role: PulseUI.TextRole, style: PulseUI.TextFontStyle = .proportional, weight: PulseUI.UXFont.Weight = .regular, width: PulseUI.TextWidth = .standard, color: PulseUI.UXColor = .label) -> Foundation.NSAttributedString
  @objc deinit
}
extension Foundation.NSAttributedString.Key {
  package static let objectId: Foundation.NSAttributedString.Key
  package static let isTechnical: Foundation.NSAttributedString.Key
  package static let subheadline: Foundation.NSAttributedString.Key
}
package struct NetworkContent : Swift.OptionSet {
  package let rawValue: Swift.Int16
  package init(rawValue: Swift.Int16)
  package static let header: PulseUI.NetworkContent
  package static let largeHeader: PulseUI.NetworkContent
  package static let taskDetails: PulseUI.NetworkContent
  package static let requestComponents: PulseUI.NetworkContent
  package static let requestQueryItems: PulseUI.NetworkContent
  package static let errorDetails: PulseUI.NetworkContent
  package static let originalRequestHeaders: PulseUI.NetworkContent
  package static let currentRequestHeaders: PulseUI.NetworkContent
  package static let requestOptions: PulseUI.NetworkContent
  package static let requestBody: PulseUI.NetworkContent
  package static let responseHeaders: PulseUI.NetworkContent
  package static let responseBody: PulseUI.NetworkContent
  package static let sharing: PulseUI.NetworkContent
  package static let preview: PulseUI.NetworkContent
  package static let summary: PulseUI.NetworkContent
  package static let all: PulseUI.NetworkContent
  package typealias ArrayLiteralElement = PulseUI.NetworkContent
  package typealias Element = PulseUI.NetworkContent
  package typealias RawValue = Swift.Int16
}
@_Concurrency.MainActor @preconcurrency package struct DateRangePicker : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let title: Swift.String
  @SwiftUICore.Binding @_projectedValueProperty($date) @_Concurrency.MainActor @preconcurrency package var date: Foundation.Date? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency package var $date: SwiftUICore.Binding<Foundation.Date?> {
    get
  }
  @_Concurrency.MainActor @preconcurrency package init(title: Swift.String, date: SwiftUICore.Binding<Foundation.Date?>)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI15DateRangePickerV4bodyQrvp", 0) __
}
public enum ShareStoreOutput : Swift.String, Swift.RawRepresentable, Swift.Codable, Swift.CaseIterable {
  case store, text, html, har
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PulseUI.ShareStoreOutput]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [PulseUI.ShareStoreOutput] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
package struct ShareItems : Swift.Identifiable {
  package let id: Foundation.UUID
  package let items: [Any]
  package let size: Swift.Int64?
  package let cleanup: () -> Swift.Void
  package init(_ items: [Any], size: Swift.Int64? = nil, cleanup: @escaping () -> Swift.Void = { })
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ID = Foundation.UUID
}
package enum ShareService {
  package static func share(_ entities: [CoreData.NSManagedObject], store: Pulse.LoggerStore, as output: PulseUI.ShareOutput) async throws -> PulseUI.ShareItems
  package static func share(_ message: Pulse.LoggerMessageEntity, as output: PulseUI.ShareOutput) -> PulseUI.ShareItems
  package static func share(_ task: Pulse.NetworkTaskEntity, as output: PulseUI.ShareOutput, store: Pulse.LoggerStore) -> PulseUI.ShareItems
  package static func share(_ string: Foundation.NSAttributedString, as output: PulseUI.ShareOutput) -> PulseUI.ShareItems
  package static func sanitized(_ string: Foundation.NSAttributedString, as shareOutput: PulseUI.ShareOutput) -> Foundation.NSAttributedString
}
public enum ShareOutput {
  case plainText
  case html
  case pdf
  case har
  public static func == (a: PulseUI.ShareOutput, b: PulseUI.ShareOutput) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct ConsoleSearchListSelectionView<Data, ID, Label> : SwiftUICore.View where Data : Swift.RandomAccessCollection, ID : Swift.Hashable, Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let title: Swift.String
  @_Concurrency.MainActor @preconcurrency package let items: Data
  @_Concurrency.MainActor @preconcurrency package let id: Swift.KeyPath<Data.Element, ID>
  @SwiftUICore.Binding @_projectedValueProperty($selection) @_Concurrency.MainActor @preconcurrency package var selection: Swift.Set<ID> {
    get
    @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
    nonmutating set
    @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency package var $selection: SwiftUICore.Binding<Swift.Set<ID>> {
    get
  }
  @_Concurrency.MainActor @preconcurrency package let description: (Data.Element) -> Swift.String
  @_Concurrency.MainActor @preconcurrency package let label: (Data.Element) -> Label
  @_Concurrency.MainActor @preconcurrency package var limit: Swift.Int
  @_Concurrency.MainActor @preconcurrency package init(title: Swift.String, items: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<Swift.Set<ID>>, description: @escaping (Data.Element) -> Swift.String, @SwiftUICore.ViewBuilder label: @escaping (Data.Element) -> Label, limit: Swift.Int? = nil)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI30ConsoleSearchListSelectionViewV4bodyQrvp", 0) __<Data, ID, Label>
}
package enum ConsoleUpdateEvent {
  case refresh
  case update(Swift.CollectionDifference<CoreData.NSManagedObjectID>?)
}
extension SwiftUICore.EnvironmentValues {
  package var textViewSearchContext: PulseUI.TextViewSearchContext? {
    get
    set
  }
}
package struct TextViewSearchContext {
  package let searchTerm: PulseUI.ConsoleSearchTerm
  package let matchIndex: Swift.Int
  package init(searchTerm: PulseUI.ConsoleSearchTerm, matchIndex: Swift.Int)
}
@available(iOS 16, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct ConsoleStaticList : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let entities: [CoreData.NSManagedObject]
  @_Concurrency.MainActor @preconcurrency package init(entities: [CoreData.NSManagedObject])
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI17ConsoleStaticListV4bodyQrvp", 0) __
}
final package class TextHelper {
  package init()
  final package func attributes(role: PulseUI.TextRole, style: PulseUI.TextFontStyle = .proportional, weight: PulseUI.UXFont.Weight = .regular, width: PulseUI.TextWidth = .standard, color: PulseUI.UXColor? = .label) -> [Foundation.NSAttributedString.Key : Any]
  final package func attributes(style: PulseUI.TextStyle, color: PulseUI.UXColor?) -> [Foundation.NSAttributedString.Key : Any]
  final package func font(style: PulseUI.TextStyle) -> PulseUI.UXFont
  @objc deinit
}
package struct TextStyle : Swift.Hashable {
  package var role: PulseUI.TextRole
  package var style: PulseUI.TextFontStyle
  package var weight: PulseUI.UXFont.Weight
  package var width: PulseUI.TextWidth
  package init(role: PulseUI.TextRole, style: PulseUI.TextFontStyle = .proportional, weight: PulseUI.UXFont.Weight = .regular, width: PulseUI.TextWidth = .standard)
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: PulseUI.TextStyle, b: PulseUI.TextStyle) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
package enum TextRole {
  case title
  case subheadline
  case body
  case body2
  package static func == (a: PulseUI.TextRole, b: PulseUI.TextRole) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
package enum TextFontStyle {
  case proportional
  case monospaced
  case monospacedDigital
  package static func == (a: PulseUI.TextFontStyle, b: PulseUI.TextFontStyle) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
package enum TextWidth {
  case condensed
  case standard
  package static func == (a: PulseUI.TextWidth, b: PulseUI.TextWidth) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency package struct ConsoleSearchLogLevelsCell : SwiftUICore.View {
  @SwiftUICore.Binding @_projectedValueProperty($selection) @_Concurrency.MainActor @preconcurrency package var selection: Swift.Set<Pulse.LoggerStore.Level> {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency package var $selection: SwiftUICore.Binding<Swift.Set<Pulse.LoggerStore.Level>> {
    get
  }
  @_Concurrency.MainActor @preconcurrency package init(selection: SwiftUICore.Binding<Swift.Set<Pulse.LoggerStore.Level>>)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI26ConsoleSearchLogLevelsCellV4bodyQrvp", 0) __
}
package enum LoggerEntity {
  case message(Pulse.LoggerMessageEntity)
  case task(Pulse.NetworkTaskEntity)
  package init(_ entity: CoreData.NSManagedObject)
  package var task: Pulse.NetworkTaskEntity? {
    get
  }
}
extension Pulse.LoggerMessageEntity {
  final package var logLevel: Pulse.LoggerStore.Level {
    get
  }
}
extension Pulse.NetworkTaskEntity.State {
  package var tintColor: SwiftUICore.Color {
    get
  }
  package var iconSystemName: Swift.String {
    get
  }
}
extension Pulse.LoggerSessionEntity {
  final package var formattedDate: Swift.String {
    get
  }
  final package var searchTags: [Swift.String] {
    get
  }
  final package func formattedDate(isCompact: Swift.Bool = false) -> Swift.String
  final package var fullVersion: Swift.String? {
    get
  }
}
extension Pulse.NetworkTaskEntity {
  final package func cURLDescription() -> Swift.String
}
extension Pulse.NetworkTaskEntity {
  package struct InfoItem : Swift.Identifiable {
    package let id: Foundation.UUID
    package let field: PulseUI.ConsoleListDisplaySettings.TaskField
    package let value: Swift.String
    package var title: Swift.String {
      get
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias ID = Foundation.UUID
  }
  final package func makeInfoItem(for field: PulseUI.ConsoleListDisplaySettings.TaskField) -> Pulse.NetworkTaskEntity.InfoItem?
  final package func makeInfoText(for field: PulseUI.ConsoleListDisplaySettings.TaskField) -> Swift.String?
  final package func getShortTitle(options: PulseUI.ConsoleListDisplaySettings) -> Swift.String
  final package func getFormattedContent(settings: PulseUI.ConsoleListDisplaySettings.ContentSettings) -> Swift.String?
  package static func formattedURL(_ url: Swift.String, components displayed: Swift.Set<PulseUI.ConsoleListDisplaySettings.URLComponent>) -> Swift.String?
}
@_Concurrency.MainActor @preconcurrency package struct TimingView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let viewModel: PulseUI.TimingViewModel
  @_Concurrency.MainActor @preconcurrency package init(viewModel: PulseUI.TimingViewModel)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI10TimingViewV4bodyQrvp", 0) __
}
final package class TimingViewModel {
  final package let sections: [PulseUI.TimingRowSectionViewModel]
  package init(sections: [PulseUI.TimingRowSectionViewModel])
  final package var longestTitle: Swift.String {
    get
  }
  final package var longestValue: Swift.String {
    get
  }
  @objc deinit
}
final package class TimingRowSectionViewModel : Swift.Identifiable {
  final package let title: Swift.String
  final package let items: [PulseUI.TimingRowViewModel]
  final package var isHeader: Swift.Bool
  final package var id: Swift.ObjectIdentifier {
    get
  }
  package init(title: Swift.String, items: [PulseUI.TimingRowViewModel], isHeader: Swift.Bool = false)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
final package class TimingRowViewModel : Swift.Identifiable {
  final package let title: Swift.String
  final package let value: Swift.String
  final package let color: PulseUI.UXColor
  final package let start: CoreFoundation.CGFloat
  final package let length: CoreFoundation.CGFloat
  final package var id: Swift.ObjectIdentifier {
    get
  }
  package init(title: Swift.String, value: Swift.String, color: PulseUI.UXColor, start: CoreFoundation.CGFloat, length: CoreFoundation.CGFloat)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
final package class ManagedObjectsObserver<T> : ObjectiveC.NSObject, CoreData.NSFetchedResultsControllerDelegate where T : CoreData.NSManagedObject {
  @Combine.Published @_projectedValueProperty($objects) final package var objects: [T] {
    get
  }
  final package var $objects: Combine.Published<[T]>.Publisher {
    get
  }
  package init(request: CoreData.NSFetchRequest<T>, context: CoreData.NSManagedObjectContext, cacheName: Swift.String? = nil)
  @objc final package func controllerDidChangeContent(_ controller: CoreData.NSFetchedResultsController<any CoreData.NSFetchRequestResult>)
  @objc deinit
}
extension PulseUI.ManagedObjectsObserver where T == Pulse.LoggerSessionEntity {
  package static func sessions(for context: CoreData.NSManagedObjectContext) -> PulseUI.ManagedObjectsObserver<T>
}
extension PulseUI.KeyValueSectionViewModel {
  package static func makeMetadata(for message: Pulse.LoggerMessageEntity) -> [PulseUI.KeyValueSectionViewModel]
}
final package class ConsoleRouter : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($shareItems) final package var shareItems: PulseUI.ShareItems? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final package var $shareItems: Combine.Published<PulseUI.ShareItems?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isShowingFilters) final package var isShowingFilters: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final package var $isShowingFilters: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isShowingSettings) final package var isShowingSettings: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final package var $isShowingSettings: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isShowingSessions) final package var isShowingSessions: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final package var $isShowingSessions: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isShowingShareStore) final package var isShowingShareStore: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final package var $isShowingShareStore: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  package init()
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency package static var keyWindow: UIKit.UIWindow? {
    get
  }
}
final package class NetworkRequestInfoCellViewModel {
  final package let httpMethod: Swift.String
  final package let url: Swift.String
  final package let render: () -> Foundation.NSAttributedString
  package init(task: Pulse.NetworkTaskEntity, store: Pulse.LoggerStore)
  package init(transaction: Pulse.NetworkTransactionMetricsEntity)
  @objc deinit
}
package struct Palette {
  package static var red: PulseUI.UXColor {
    get
  }
  package static var pink: PulseUI.UXColor {
    get
  }
}
package typealias UXColor = UIKit.UIColor
package typealias UXFont = UIKit.UIFont
package typealias UXImage = UIKit.UIImage
extension UIKit.UIColor {
  package static func dynamic(light: UIKit.UIColor, dark: UIKit.UIColor) -> UIKit.UIColor
}
package typealias UXTextView = UIKit.UITextView
package typealias UXPasteboard = UIKit.UIPasteboard
extension UIKit.UITextView {
  @_Concurrency.MainActor @preconcurrency package var isAutomaticLinkDetectionEnabled: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.Image {
  package init(uxImage: PulseUI.UXImage)
}
@_hasMissingDesignatedInitializers final public class UserSettings : Combine.ObservableObject {
  public static let shared: PulseUI.UserSettings
  @SwiftUI.AppStorage @_projectedValueProperty($mode) final public var mode: PulseUI.ConsoleMode {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    _modify
  }
  final public var $mode: SwiftUICore.Binding<PulseUI.ConsoleMode> {
    get
  }
  @SwiftUI.AppStorage @_projectedValueProperty($lineLimit) final public var lineLimit: Swift.Int {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    _modify
  }
  final public var $lineLimit: SwiftUICore.Binding<Swift.Int> {
    get
  }
  @SwiftUI.AppStorage @_projectedValueProperty($isLinkDetectionEnabled) final public var isLinkDetectionEnabled: Swift.Bool {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    _modify
  }
  final public var $isLinkDetectionEnabled: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.AppStorage @_projectedValueProperty($sharingOutput) final public var sharingOutput: PulseUI.ShareStoreOutput {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    _modify
  }
  final public var $sharingOutput: SwiftUICore.Binding<PulseUI.ShareStoreOutput> {
    get
  }
  @available(*, deprecated, message: "Replaced with listDisplayOptions.header.fields and listDisplayOptions.footer.fields")
  final public var displayHeaders: [Swift.String] {
    get
    set
  }
  @SwiftUI.AppStorage @_projectedValueProperty($isShowingCurrentRequest) final public var isShowingCurrentRequest: Swift.Bool {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    _modify
  }
  final public var $isShowingCurrentRequest: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  final public var allowedShareStoreOutputs: [PulseUI.ShareStoreOutput] {
    get
    set
  }
  @SwiftUI.AppStorage @_projectedValueProperty($isRemoteLoggingHidden) final public var isRemoteLoggingHidden: Swift.Bool {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    _modify
  }
  final public var $isRemoteLoggingHidden: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  final public var listDisplayOptions: PulseUI.ConsoleListDisplaySettings {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 16, visionOS 1, *)
@_Concurrency.MainActor @preconcurrency package struct NetworkRequestStatusCell : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package let viewModel: PulseUI.NetworkRequestStatusCellModel
  @_Concurrency.MainActor @preconcurrency package init(viewModel: PulseUI.NetworkRequestStatusCellModel)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16, tvOS 13.0, watchOS 6.0, visionOS 1, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI24NetworkRequestStatusCellV4bodyQrvp", 0) __
}
package struct NetworkRequestStatusCellModel {
  package let status: PulseUI.StatusLabelViewModel
  package let isMock: Swift.Bool
  package init(task: Pulse.NetworkTaskEntity, store: Pulse.LoggerStore?)
  package init(transaction: Pulse.NetworkTransactionMetricsEntity)
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func invisible() -> some SwiftUICore.View
  
}
package struct Backport<Content> where Content : SwiftUICore.View {
  package let content: Content
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package var backport: PulseUI.Backport<Self> {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func inlineNavigationTitle(_ title: Swift.String) -> some SwiftUICore.View
  
}
final package class IgnoringUpdates<T> : Combine.ObservableObject {
  final package var value: T
  package init(_ value: T)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension Swift.Character {
  package init?(_ code: Foundation.unichar)
}
@available(iOS 16, visionOS 1, *)
extension Foundation.AttributedString {
  package init(_ string: Swift.String, _ configure: (inout Foundation.AttributeContainer) -> Swift.Void)
  package mutating func append(_ string: Swift.String, _ configure: (inout Foundation.AttributeContainer) -> Swift.Void)
}
extension CoreData.NSManagedObject {
  package func reset()
}
extension CoreData.NSManagedObjectContext {
  package func getDistinctValues(entityName: Swift.String, property: Swift.String) -> Swift.Set<Swift.String>
}
extension Security.tls_ciphersuite_t {
  package var description: Swift.String {
    get
  }
}
extension Security.tls_protocol_version_t {
  package var description: Swift.String {
    get
  }
}
package func descriptionForURLErrorCode(_ code: Swift.Int) -> Swift.String
extension Foundation.NSURLRequest.CachePolicy {
  package var description: Swift.String {
    get
  }
}
package struct StringSearchOptions : Swift.Equatable, Swift.Hashable, Swift.Codable {
  package var kind: PulseUI.StringSearchOptions.Kind
  package var caseSensitivity: PulseUI.StringSearchOptions.CaseSensitivity
  package var rule: PulseUI.StringSearchOptions.MatchingRule
  package static let `default`: PulseUI.StringSearchOptions
  package init(kind: PulseUI.StringSearchOptions.Kind = .text, caseSensitivity: PulseUI.StringSearchOptions.CaseSensitivity = .ignoringCase, rule: PulseUI.StringSearchOptions.MatchingRule = .contains)
  package enum Kind : Swift.String, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case text
    case wildcard
    case regex
    package init?(rawValue: Swift.String)
    package typealias AllCases = [PulseUI.StringSearchOptions.Kind]
    package typealias RawValue = Swift.String
    nonisolated package static var allCases: [PulseUI.StringSearchOptions.Kind] {
      get
    }
    package var rawValue: Swift.String {
      get
    }
  }
  package enum CaseSensitivity : Swift.String, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case ignoringCase
    case matchingCase
    package init?(rawValue: Swift.String)
    package typealias AllCases = [PulseUI.StringSearchOptions.CaseSensitivity]
    package typealias RawValue = Swift.String
    nonisolated package static var allCases: [PulseUI.StringSearchOptions.CaseSensitivity] {
      get
    }
    package var rawValue: Swift.String {
      get
    }
  }
  package enum MatchingRule : Swift.String, Swift.Equatable, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case begins
    case contains
    case ends
    package init?(rawValue: Swift.String)
    package typealias AllCases = [PulseUI.StringSearchOptions.MatchingRule]
    package typealias RawValue = Swift.String
    nonisolated package static var allCases: [PulseUI.StringSearchOptions.MatchingRule] {
      get
    }
    package var rawValue: Swift.String {
      get
    }
  }
  package var title: Swift.String {
    get
  }
  package func allEligibleMatchingRules() -> [PulseUI.StringSearchOptions.MatchingRule]?
  package static func == (a: PulseUI.StringSearchOptions, b: PulseUI.StringSearchOptions) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package func encode(to encoder: any Swift.Encoder) throws
  package var hashValue: Swift.Int {
    get
  }
  package init(from decoder: any Swift.Decoder) throws
}
extension Foundation.NSString.CompareOptions {
  package init(_ options: PulseUI.StringSearchOptions)
}
extension Swift.String {
  package func firstRange(of substring: Swift.String, options: Swift.String.CompareOptions = []) -> Swift.Range<Swift.String.Index>?
}
extension Swift.String {
  package func ranges(of target: Swift.String, options: PulseUI.StringSearchOptions) -> [Swift.Range<Swift.String.Index>]
}
extension Foundation.NSString {
  package func ranges(of substring: Swift.String, options: PulseUI.StringSearchOptions) -> [Foundation.NSRange]
}
public struct ConsoleListDisplaySettings : Swift.Hashable, Swift.Codable {
  public var header: PulseUI.ConsoleListDisplaySettings.HeaderSettings
  public var content: PulseUI.ConsoleListDisplaySettings.ContentSettings
  public var footer: PulseUI.ConsoleListDisplaySettings.FooterSettings
  public struct HeaderSettings : Swift.Hashable, Swift.Codable {
    public var fontSize: Swift.Int
    public var lineLimit: Swift.Int
    public var fields: [PulseUI.ConsoleListDisplaySettings.TaskField]
    public init(fontSize: Swift.Int? = nil, lineLimit: Swift.Int = 1, fields: [PulseUI.ConsoleListDisplaySettings.TaskField]? = nil)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PulseUI.ConsoleListDisplaySettings.HeaderSettings, b: PulseUI.ConsoleListDisplaySettings.HeaderSettings) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ContentSettings : Swift.Hashable, Swift.Codable {
    public var showTaskDescription: Swift.Bool
    public var showMethod: Swift.Bool
    public var components: Swift.Set<PulseUI.ConsoleListDisplaySettings.URLComponent>
    public var fontSize: Swift.Int
    public var lineLimit: Swift.Int
    public var isMonospaced: Swift.Bool
    public init(showTaskDescription: Swift.Bool = false, showMethod: Swift.Bool = true, components: Swift.Set<PulseUI.ConsoleListDisplaySettings.URLComponent> = [.path], fontSize: Swift.Int? = nil, lineLimit: Swift.Int = 3)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PulseUI.ConsoleListDisplaySettings.ContentSettings, b: PulseUI.ConsoleListDisplaySettings.ContentSettings) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct FooterSettings : Swift.Sendable, Swift.Hashable, Swift.Codable {
    public var fontSize: Swift.Int
    public var lineLimit: Swift.Int
    public var fields: [PulseUI.ConsoleListDisplaySettings.TaskField]
    public var additionalFields: [PulseUI.ConsoleListDisplaySettings.TaskField]
    public var isMonospaced: Swift.Bool
    public init(fontSize: Swift.Int? = nil, lineLimit: Swift.Int = 1)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PulseUI.ConsoleListDisplaySettings.FooterSettings, b: PulseUI.ConsoleListDisplaySettings.FooterSettings) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum URLComponent : Swift.String, Swift.CaseIterable, Swift.Codable {
    case scheme, user, password, host, port, path, query, fragment
    public init?(rawValue: Swift.String)
    public typealias AllCases = [PulseUI.ConsoleListDisplaySettings.URLComponent]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [PulseUI.ConsoleListDisplaySettings.URLComponent] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum TaskField : Swift.Sendable, Swift.Codable, Swift.Hashable {
    case method
    case requestSize
    case responseSize
    case responseContentType
    case duration
    case host
    case statusCode
    case taskType
    case taskDescription
    case requestHeaderField(Swift.String)
    case responseHeaderField(Swift.String)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PulseUI.ConsoleListDisplaySettings.TaskField, b: PulseUI.ConsoleListDisplaySettings.TaskField) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PulseUI.ConsoleListDisplaySettings, b: PulseUI.ConsoleListDisplaySettings) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension PulseUI.ConsoleListDisplaySettings {
  package static let defaultContentFontSize: Swift.Int
  package static let defaultHeaderFooterFontSize: Swift.Int
}
@_Concurrency.MainActor @preconcurrency package struct ShareView : SwiftUI.UIViewControllerRepresentable {
  @_Concurrency.MainActor @preconcurrency package init(activityItems: [Any])
  @_Concurrency.MainActor @preconcurrency package init(_ items: PulseUI.ShareItems)
  @_Concurrency.MainActor @preconcurrency package func onCompletion(_ completion: @escaping () -> Swift.Void) -> PulseUI.ShareView
  @_Concurrency.MainActor @preconcurrency package func makeUIViewController(context: SwiftUI.UIViewControllerRepresentableContext<PulseUI.ShareView>) -> UIKit.UIActivityViewController
  @_Concurrency.MainActor @preconcurrency package func updateUIViewController(_ uiViewController: UIKit.UIActivityViewController, context: SwiftUI.UIViewControllerRepresentableContext<PulseUI.ShareView>)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  package typealias Coordinator = Swift.Void
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  package typealias UIViewControllerType = UIKit.UIActivityViewController
}
@_Concurrency.MainActor @preconcurrency package struct ConsoleTaskCell : SwiftUICore.View {
  package enum EditableArea {
    case header, content, footer
    package static func == (a: PulseUI.ConsoleTaskCell.EditableArea, b: PulseUI.ConsoleTaskCell.EditableArea) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency package var highlightedArea: PulseUI.ConsoleTaskCell.EditableArea?
  @_Concurrency.MainActor @preconcurrency package init(task: Pulse.NetworkTaskEntity, isDisclosureNeeded: Swift.Bool = false, highlightedArea: PulseUI.ConsoleTaskCell.EditableArea? = nil)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI15ConsoleTaskCellV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency package struct PlaceholderView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package var imageName: Swift.String?
  @_Concurrency.MainActor @preconcurrency package let title: Swift.String
  @_Concurrency.MainActor @preconcurrency package var subtitle: Swift.String?
  @_Concurrency.MainActor @preconcurrency package init(imageName: Swift.String? = nil, title: Swift.String, subtitle: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI15PlaceholderViewV4bodyQrvp", 0) __
}
extension Foundation.NSMutableAttributedString {
  package func append(_ string: Swift.String, _ attributes: [Foundation.NSAttributedString.Key : Any] = [:])
  package func addAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any])
}
@_Concurrency.MainActor @preconcurrency public struct ConsoleView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func closeButtonHidden(_ isHidden: Swift.Bool = true) -> PulseUI.ConsoleView
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7PulseUI11ConsoleViewV4bodyQrvp", 0) __
}
package struct SelectedSessionsIDs : Swift.Hashable, Swift.Identifiable {
  package var id: PulseUI.SelectedSessionsIDs {
    get
  }
  package let ids: Swift.Set<Foundation.UUID>
  package init(ids: Swift.Set<Foundation.UUID>)
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: PulseUI.SelectedSessionsIDs, b: PulseUI.SelectedSessionsIDs) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ID = PulseUI.SelectedSessionsIDs
  package var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13, *)
@_Concurrency.MainActor @preconcurrency package struct ConsoleSessionCell : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(session: Pulse.LoggerSessionEntity, isCompact: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 13, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7PulseUI18ConsoleSessionCellV4bodyQrvp", 0) __
}
@available(iOS 16, visionOS 1, *)
extension PulseUI.SettingsView : Swift.Sendable {}
extension PulseUI.ConsoleView : Swift.Sendable {}
extension PulseUI.ConsoleMode : Swift.Equatable {}
extension PulseUI.ConsoleMode : Swift.Hashable {}
extension PulseUI.ConsoleMode : Swift.RawRepresentable {}
extension PulseUI.ShareStoreOutput : Swift.Equatable {}
extension PulseUI.ShareStoreOutput : Swift.Hashable {}
extension PulseUI.ShareOutput : Swift.Equatable {}
extension PulseUI.ShareOutput : Swift.Hashable {}
extension PulseUI.ConsoleListDisplaySettings.URLComponent : Swift.Equatable {}
extension PulseUI.ConsoleListDisplaySettings.URLComponent : Swift.Hashable {}
extension PulseUI.ConsoleListDisplaySettings.URLComponent : Swift.RawRepresentable {}
